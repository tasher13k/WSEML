Пусть есть класс, объекты которого так или иначе могут иметь структуру дерева (в моем случае это расширенный JSON, но могут быть и другие варианты --- XML, например). Под транзакционной семантикой для такого класса имеется ввиду добавление трех методов в этот класс --- start, commit и rollback. Эти методы не имеют возвращаемого значения, и единственный параметр каждого из них --- это указатель на узел в том дереве, которое представляет собой объект, для которого метод вызывается. Метод start начинает транзакцию на определенном поддереве (узел, на который указывает параметр и его поддерево), метод commit завершает транзакцию успешно (обычно это означает подчистку всей дополнительной информации, хранимой в дереве для возможного отката транзакции), и метод rollback означает откат транзакции, т. е. отмену всех изменений в том поддереве, которое указано при помощи параметра, произведенных со времени соответствующего вызова метода start (при этом в вызове commit или rollback, завершающем транзакцию, и соответствующем ему вызове start должен быть указан один и тот же параметр).

Транзакции вполне могут быть вложенными одна в другую на произвольную глубину. Это означает, что после вызова start для одного поддерева вполне возможен повторный вызов start для другого поддерева, и вызов commit или rollback относится к последнему еще не завершенному вызову start. Единственное требование, которое должно выполняться при этом, состоит в том, чтобы параметр никакого вложенного вызова start  не был бы выше по дереву объекта, чем параметр объемлющего вызова, т. е. параметр вложенного start всегда должен быть расположен ниже по дереву или независимо (непересекающееся поддерево) относительно параметра объемлющего вызова start.

Единственное требование к реализации состоит в том, чтобы вся необходимая для организации транзакций дополнительная информация хранилась в том же объекте, для которого эти методы вызываются, хотя бы и скрытым образом (все остальные методы работы с представленным в объекте деревом должны быть реализованы так, чтобы они работали прозрачно, т. е. так же, как и до добавления транзакционной семантики).

Ваша конкретная задача будет состоять в том, чтобы проанализировать определенную реализацию расширенного JSON (она выполнена одним из Ваших предшественников и будет Вам предоставлена) и добавить туда поддержку транзакционной семантики (добавить три метода, описанных выше, и изменить реализацию остальных, если потребуется).
